name: Docker Image CI/CD for reelsai.pro

on:
  workflow_dispatch:
  # Uncomment the following lines if you want to trigger on push to main
  # push:
  #   branches: [ "main" ]

env:
  AWS_REGION: ap-south-1
  ECR_REPOSITORY: reelsai-pro
  CONTAINER_NAME: reelsai-pro
  SUPABASE_URL: ${{ vars.SUPABASE_URL }}
  SUPABASE_KEY: ${{ vars.SUPABASE_KEY }}
  SUPABASE_SERVICE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY }}
  REPLICATE_API_TOKEN: ${{ secrets.REPLICATE_API_TOKEN }}
  OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
  RAI_GATEWAY_BACKEND_URL: ${{ vars.RAI_GATEWAY_BACKEND_URL }}
  SUPABASE_JWT_SECRET: ${{ secrets.SUPABASE_JWT_SECRET }}
  ZOHO_APP_PASSWORD: ${{ secrets.ZOHO_APP_PASSWORD }}
  NEW_RELIC_LICENSE_KEY: ${{ secrets.NEW_RELIC_LICENSE_KEY }}
  NEW_RELIC_APP_NAME: ra-gateway-prod
  SENTRY_DSN: ${{ vars.SENTRY_DSN }}
  APP_ENV: prod

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    environment: prod

    steps:
      - name: Check out code
        uses: actions/checkout@v3  # Updated to latest version

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2  # Updated to latest version
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG_SHA: cicd-prod-${{ github.sha }}
          IMAGE_TAG_LATEST: cicd-prod-latest
        run: |
          echo "Building Docker image..."
          docker build \
            --tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG_SHA \
            --build-arg SUPABASE_URL="${SUPABASE_URL}" \
            --build-arg SUPABASE_KEY="${SUPABASE_KEY}" \
            --build-arg SUPABASE_SERVICE_KEY="${SUPABASE_SERVICE_KEY}" \
            --build-arg REPLICATE_API_TOKEN="${REPLICATE_API_TOKEN}" \
            --build-arg OPENAI_API_KEY="${OPENAI_API_KEY}" \
            --build-arg RAI_GATEWAY_BACKEND_URL="${RAI_GATEWAY_BACKEND_URL}" \
            --build-arg SUPABASE_JWT_SECRET="${SUPABASE_JWT_SECRET}" \
            --build-arg ZOHO_APP_PASSWORD="${ZOHO_APP_PASSWORD}" \
            --build-arg NEW_RELIC_LICENSE_KEY="${NEW_RELIC_LICENSE_KEY}" \
            --build-arg NEW_RELIC_APP_NAME="${NEW_RELIC_APP_NAME}" \
            --build-arg SENTRY_DSN="${SENTRY_DSN}" \
            --build-arg APP_ENV="${APP_ENV}" \
            .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG_SHA $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG_LATEST
          echo "Pushing Docker images to ECR..."
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG_SHA
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG_LATEST

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: build
    environment: prod

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2  # Updated to latest version
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Deploy to EC2
        env:
          PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          HOST: ${{ vars.EC2_HOST }}
          USER: ${{ vars.EC2_USER }}
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
          IMAGE_TAG_LATEST: cicd-prod-latest
          AWS_REGION: ${{ env.AWS_REGION }}
          CONTAINER_NAME: ${{ env.CONTAINER_NAME }}
        run: |
          # Create SSH private key file
          echo "$PRIVATE_KEY" > private_key
          chmod 600 private_key

          # Debug: Verify environment variables on GitHub Actions runner
          echo "===== GitHub Actions Runner Environment Variables ====="
          echo "ECR_REGISTRY: $ECR_REGISTRY"
          echo "ECR_REPOSITORY: $ECR_REPOSITORY"
          echo "AWS_REGION: $AWS_REGION"
          echo "IMAGE_TAG_LATEST: $IMAGE_TAG_LATEST"
          echo "CONTAINER_NAME: $CONTAINER_NAME"
          echo "HOST: $HOST"
          echo "USER: $USER"
          echo "========================================================"

          # SSH into the EC2 instance and run deployment commands
          ssh -o StrictHostKeyChecking=no -i private_key ${USER}@${HOST} bash -s <<- EOF
            set -e  # Exit immediately if a command exits with a non-zero status

            echo "===== EC2 Instance Environment Variables ====="
            echo "ECR_REGISTRY: ${ECR_REGISTRY}"
            echo "ECR_REPOSITORY: ${ECR_REPOSITORY}"
            echo "AWS_REGION: ${AWS_REGION}"
            echo "IMAGE_TAG_LATEST: ${IMAGE_TAG_LATEST}"
            echo "CONTAINER_NAME: ${CONTAINER_NAME}"
            echo "=============================================="

            # Login to ECR
            echo "Logging into Amazon ECR..."
            aws ecr get-login-password --region ${AWS_REGION} | sudo docker login --username AWS --password-stdin ${ECR_REGISTRY}

            # Pull the latest image
            echo "Pulling the latest Docker image..."
            sudo docker pull ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG_LATEST}

            # Echo the full image name for debugging
            echo "Deploying image: ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG_LATEST}"

            # Stop and remove the existing container if it exists
            echo "Stopping and removing existing Docker container if it exists..."
            sudo docker stop ${CONTAINER_NAME} || true
            sudo docker rm ${CONTAINER_NAME} || true

            # Run the new container
            echo "Running the new Docker container..."
            sudo docker run -d --name ${CONTAINER_NAME} \
              -p 5151:5151 \
              --restart unless-stopped \
              ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG_LATEST}

            echo "===== Deployment Completed Successfully ====="
EOF

          # Clean up SSH private key
          rm -f private_key